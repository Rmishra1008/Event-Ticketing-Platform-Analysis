-- Identify ticket sales over time:

SELECT MONTHNAME(saletime) AS month,
       COUNT(*) AS ticket_sales_count
FROM sales
GROUP BY MONTH(saletime), month
ORDER BY MONTH(saletime);

-- Success rates for sellers:

SELECT
    L.SELLERID,
    COUNT(*) AS TOTAL_LISTINGS,
    COUNT(CASE WHEN S.SALETIME IS NOT NULL THEN 1 END) AS SUCCESSFUL_LISTINGS,
    CONCAT(FORMAT(((COUNT(CASE WHEN S.SALETIME IS NOT NULL THEN 1 END) / COUNT(*)) * 100), 2), '%') AS SUCCESS_RATE
FROM Listings L
LEFT JOIN Sales S ON L.LISTID = S.LISTID
GROUP BY L.SELLERID
ORDER BY 4 DESC
LIMIT 10;


-- Top 10 Best selling events:
SELECT
    e.EVENTID,
    e.EVENTNAME,
    SUM(s.QTYSOLD) AS TOTAL_TICKETS_SOLD
FROM Events e
JOIN Sales S
ON e.EVENTID = s.EVENTID
GROUP BY e.EVENTID, e.EVENTNAME
ORDER BY TOTAL_TICKETS_SOLD DESC
LIMIT 10;

-- Top 10 best grossing events:
SELECT
    E.EVENTID,
    E.EVENTNAME,
    SUM(S.QTYSOLD * L.PRICEPERTICKET) AS TOTAL_REVENUE
FROM Events E
JOIN Sales S ON E.EVENTID = S.EVENTID
JOIN Listings L ON S.LISTID = L.LISTID
GROUP BY E.EVENTID, E.EVENTNAME
ORDER BY TOTAL_REVENUE DESC
LIMIT 10;

-- Top 10 best selling venues:

SELECT
    V.VENUEID,
    V.VENUENAME,
    SUM(S.QTYSOLD) AS TOTAL_TICKETS_SOLD
FROM Venue V
JOIN Events E ON V.VENUEID = E.VENUEID
JOIN Sales S ON E.EVENTID = S.EVENTID
GROUP BY V.VENUEID, V.VENUENAME
ORDER BY TOTAL_TICKETS_SOLD DESC
LIMIT 10;


-- Top 10 best grossing venues:

SELECT
    V.VENUEID,
    V.VENUENAME,
    SUM(S.QTYSOLD * L.PRICEPERTICKET) AS TOTAL_REVENUE
FROM Venue V
JOIN Events E ON V.VENUEID = E.VENUEID
JOIN Sales S ON E.EVENTID = S.EVENTID
JOIN Listings L ON S.LISTID = L.LISTID
GROUP BY V.VENUEID, V.VENUENAME
ORDER BY TOTAL_REVENUE DESC
LIMIT 10;

-- Quarter performance Tickets sold:

SELECT
    D.YEAR,
    D.QTR,
    SUM(S.QTYSOLD) AS TOTAL_TICKETS_SOLD
FROM Date D
JOIN Events E ON D.DATEID = E.DATEID
JOIN Sales S ON E.EVENTID = S.EVENTID
GROUP BY D.YEAR, D.QTR
ORDER BY TOTAL_TICKETS_SOLD DESC;

-- Quarter performance by gross revenue:
SELECT
    D.YEAR,
    D.QTR,
    FORMAT(SUM(S.QTYSOLD * L.PRICEPERTICKET), 0) AS TOTAL_REVENUE
FROM Date D
JOIN Events E ON D.DATEID = E.DATEID
JOIN Sales S ON E.EVENTID = S.EVENTID
JOIN Listings L ON S.LISTID = L.LISTID
GROUP BY D.YEAR, D.QTR
ORDER BY TOTAL_REVENUE DESC;

-- Top 10 Cities with the higest amount paid by users:
SELECT
    U.CITY,
    SUM(S.PRICEPAID) AS TOTAL_AMOUNT_PAID
FROM Users U
JOIN Sales S ON U.USERID = S.BUYERID
GROUP BY U.CITY
ORDER BY TOTAL_AMOUNT_PAID DESC
LIMIT 10;

-- Success Rate For Each category
WITH SuccessRateByCategory AS (
    SELECT
        E.CATID,
        COUNT(*) AS TOTAL_LISTINGS,
        COUNT(CASE WHEN S.SALETIME IS NOT NULL THEN 1 END) AS SUCCESSFUL_LISTINGS,
        (COUNT(CASE WHEN S.SALETIME IS NOT NULL THEN 1 END) / COUNT(*)) * 100 AS SUCCESS_RATE
    FROM Listings L
    LEFT JOIN Sales S ON L.LISTID = S.LISTID
    JOIN Events E ON L.EVENTID = E.EVENTID
    GROUP BY E.CATID
)
SELECT
	RANK() OVER (ORDER BY SR.SUCCESS_RATE DESC) AS RANKING,
    C.CATNAME,
    SR.TOTAL_LISTINGS AS BOOKINGS_LISTED,
    SR.SUCCESSFUL_LISTINGS AS BOOKINGS_SUCCESSFUL, 
    CONCAT(FORMAT(SR.SUCCESS_RATE, 2), '%') AS SUCCESS_RATE
FROM SuccessRateByCategory SR
JOIN Category C ON SR.CATID = C.CATID
ORDER BY RANKING;
